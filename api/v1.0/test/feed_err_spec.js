TEST_USERS = require('/tmp/readerTestCreds.js');

var frisby = require('frisby');
var tc = require('./config/test_config');
var async = require('async');
var dbConfig = require('./config/db.js');

var user = TEST_USERS[0];

frisby.create('GET invalid feed entries ' + user.email)
    .get(tc.url + '/feeds/1234/entries?unreadOnly=true')
    .auth(user.sp_api_key_id, user.sp_api_key_secret)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectStatus(404)
    .expectJSON({'error' : 'User not subscribed to feed 1234'})
    .toss()

frisby.create('GET feed list missing unreadOnly param part 1 ' + user.email)
    .get(tc.url + '/feeds')
    .auth(user.sp_api_key_id, user.sp_api_key_secret)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('GET feed list missing unreadOnly param part 2 ' + user.email)
            .get(tc.url + '/feeds/' + res1.feeds[0]._id + '/entries')
            .auth(user.sp_api_key_id, user.sp_api_key_secret)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'Undefined unreadOnly parameter'})
            .toss()
    })
    .toss()

frisby.create('GET feed list invalid unreadOnly param part 1 ' + user.email)
    .get(tc.url + '/feeds')
    .auth(user.sp_api_key_id, user.sp_api_key_secret)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('GET feed list invalid unreadOnly param part 2 ' + user.email)
            .get(tc.url + '/feeds/' + res1.feeds[0]._id + '/entries?unreadOnly=blah')
            .auth(user.sp_api_key_id, user.sp_api_key_secret)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'unreadOnly parameter must be either true or false'})
            .toss()
    })
    .toss()

frisby.create('PUT feeds missing read param part 1 ' + user.email)
    .get(tc.url + '/feeds')
    .auth(user.sp_api_key_id, user.sp_api_key_secret)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feeds missing read param part 2 ' + user.email)
            .put(tc.url + '/feeds/' + res1.feeds[0]._id)
            .auth(user.sp_api_key_id, user.sp_api_key_secret)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'Undefined read parameter'})
            .toss()
    })
    .toss()

frisby.create('PUT feeds invalid read param part 1 ' + user.email)
    .get(tc.url + '/feeds')
    .auth(user.sp_api_key_id, user.sp_api_key_secret)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feeds invalid read param part 2 ' + user.email)
            .put(tc.url + '/feeds/' + res1.feeds[0]._id,
                 {'read' : 'blah'} )
            .auth(user.sp_api_key_id, user.sp_api_key_secret)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'read parameter must be true'})
            .toss()
    })
    .toss()

frisby.create('PUT feeds invalid feedID part 1 ' + user.email)
    .get(tc.url + '/feeds')
    .auth(user.sp_api_key_id, user.sp_api_key_secret)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feeds invalid feedID part 2 ' + user.email)
            .put(tc.url + '/feeds/1234',
                 {'read' : true})
            .auth(user.sp_api_key_id, user.sp_api_key_secret)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(404)
            .expectJSON({'error' : 'User not subscribed to feed 1234'})
            .toss()
    })
    .toss()

frisby.create('PUT feed entry missing read param part 1 ' + user.email)
    .get(tc.url + '/feeds')
    .auth(user.sp_api_key_id, user.sp_api_key_secret)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feed entry missing read param part 2 ' + user.email)
            .put(tc.url + '/feeds/' + res1.feeds[0]._id + '/entries/1234')
            .auth(user.sp_api_key_id, user.sp_api_key_secret)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'Undefined read parameter'})
            .toss()
    })
    .toss()

frisby.create('PUT feed entry invalid read param part 1 ' + user.email)
    .get(tc.url + '/feeds')
    .auth(user.sp_api_key_id, user.sp_api_key_secret)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feeds invalid read param part 2 ' + user.email)
            .put(tc.url + '/feeds/' + res1.feeds[0]._id + '/entries/1234',
                 {'read' : 'blah'} )
            .auth(user.sp_api_key_id, user.sp_api_key_secret)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'read parameter must be either true or false'})
            .toss()
    })
    .toss()

frisby.create('PUT feed entry invalid feedID part 1 ' + user.email)
    .get(tc.url + '/feeds')
    .auth(user.sp_api_key_id, user.sp_api_key_secret)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feeds invalid feedID part 2 ' + user.email)
            .put(tc.url + '/feeds/1234/entries/1234',
                 {'read' : 'true'} )
            .auth(user.sp_api_key_id, user.sp_api_key_secret)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(404)
            .expectJSON({'error' : 'User not subscribed to feed 1234'})
            .toss()
    })
    .toss()

frisby.create('PUT feed entry invalid entryID part 1 ' + user.email)
    .get(tc.url + '/feeds')
    .auth(user.sp_api_key_id, user.sp_api_key_secret)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feeds invalid entryID part 2 ' + user.email)
            .put(tc.url + '/feeds/' + res1.feeds[0]._id + '/entries/1234',
                 {'read' : 'true'} )
            .auth(user.sp_api_key_id, user.sp_api_key_secret)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(404)
            .expectJSON({'error' : 'Error finding entryID 1234'})
            .toss()
    })
    .toss()

frisby.create('GET feed list for user ' + user.email)
    .get(tc.url + '/feeds')
    .auth(user.sp_api_key_id, user.sp_api_key_secret)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('GET second feed for user ' + user.email)
            .get(tc.url + '/feeds/' + res1.feeds[1]._id + '/entries?unreadOnly=true')
            .auth(user.sp_api_key_id, user.sp_api_key_secret)
            .expectStatus(200)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectJSONLength('feed.unreadEntries', res1.feeds[1].unreadCount)
            .afterJSON(function markEntryRead(res2) {
                frisby.create('PUT mark entry read with wrong feedID for user ' + user.email)
                    .put(tc.url + '/feeds/' + res1.feeds[0]._id + '/entries/' + res2.feed.unreadEntries[0]._id,
                         {'read' : 'true'})
                    .auth(user.sp_api_key_id, user.sp_api_key_secret)
                    .expectStatus(404)
                    .expectHeader('Content-Type', 'application/json; charset=utf-8')
                    .expectJSON({'error' : 
                                 'Entry ' + res2.feed.unreadEntries[0]._id 
                                 + ' is part of feed ' + res1.feeds[1]._id
                                 + ' not part of feed ' + res1.feeds[0]._id})
                    .toss()
            })
            .toss()
    })
    .toss()
